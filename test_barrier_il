import unittest
import Barrier
import Barrier_old
from Source import Source, OctaveBands
from Receiver import Receiver
import random
from Geometry import Coordinate


class TestBarrier(unittest.TestCase):
    def test_ari_il(self):
        def rand_db():
            return random.randint(0, 100)

        # rand_coord = random.randint(0, 100)
        ob = OctaveBands(
            rand_db(),
            rand_db(),
            rand_db(),
            rand_db(),
            rand_db(),
            rand_db(),
            rand_db(),
            rand_db(),
        )
        dba = ob.get_dBA()
        b_start = Coordinate(5, -1, 5)
        # b_start = Coordinate(0, 0, 0) # causes error
        b_end = Coordinate(5, 1, 5)
        s_coord = Coordinate(1, 0, 1)
        r_coord = Coordinate(10, 0, 1)

        s = Source(coords=s_coord, dBA=dba, ref_dist=3.28, ob_sound_levels=ob)
        r = Receiver(coords=r_coord)
        b_old = Barrier_old.Barrier(start_coords=b_start, end_coords=b_end)
        b = Barrier.Barrier(start_coords=b_start, end_coords=b_end)

        b_old_ari = b_old.get_insertion_loss_ARI(s, r)
        b_ari = b.get_insertion_loss_ARI(s, r)
        self.assertEqual(b_old_ari, b_ari, msg=f"{b_old_ari} != {b_ari}")

        b_old_fresnel = (b_old.get_insertion_loss_OB_fresnel(s, r),)
        b_fresnel = (b.get_insertion_loss_OB_fresnel(s, r),)
        self.assertEqual(
            b_old_fresnel, b_fresnel, msg=f"{b_old_fresnel} != {b_fresnel}"
        )  # TODO need to handle where path length difference = 0

        print(ob)
        print(b_old_ari)
        print(b_ari)
        print(b_old_fresnel)
        print(b_fresnel)



if __name__ == "__main__":
    unittest.main()
